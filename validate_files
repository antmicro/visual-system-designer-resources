#!/usr/bin/env python3

# Copyright (c) 2022-2023 Antmicro <www.antmicro.com>
#
# SPDX-License-Identifier: Apache-2.0

"""
A script for validating the specification and the boards.
"""

import sys
import json
import argparse
from pathlib import Path
import shutil

from pipeline_manager.validator import validate
from pipeline_manager.frontend_builder import build_prepare


def check_interfaces(
        specification_file: Path,
        interfaces_file: Path) -> int:
    """
    Verifies categories and interfaces in the specification.

    All interfaces should be lower case and match one of
    the interfaces from ./interfaces.txt.

    Parameters
    ----------
    specification_file: Path
        Path to the specification file
    interfaces_file: Path
        Path to the list of available interfaces

    Returns
    -------
    int :
        0 if categories and interfaces are valid
        Other value in case of an error.
    """
    # Set of possible interfaces
    interface_types = set()

    with open(interfaces_file, 'r') as interfaces_fd:
        for line in interfaces_fd:
            interface_types.add(line.strip())

    with open(specification_file, 'r') as spec_fd:
        spec = json.load(spec_fd)

    status = 0
    for node in spec["nodes"]:
        if "interfaces" not in node:
            continue
        for interface in node["interfaces"]:
            if "isCategory" in node and node["isCategory"]:
                nname = node["category"]
            else:
                nname = node["name"]
            if "type" in interface:
                if isinstance(interface["type"], list):
                    for itype in interface["type"]:
                        if itype not in interface_types:
                            print(
                                f'Interface Error: Node "{nname}" has '
                                f'interface "{interface["name"]}" with '
                                f'invalid subtype "{itype}"'
                            )
                            status = 1
                elif interface["type"] not in interface_types:
                    print(
                        f'Interface Error: Node "{nname}" has '
                        f'interface "{interface["name"]}" with invalid '
                        f'type "{interface["type"]}"'
                    )
                    status = 1
    return status


def validate_graphs(
        boards_directory: Path,
        specification_file: Path,
        interfaces_file: Path,
        pipeline_manager_build_directory: Path) -> int:
    """
    Validates the specification file and boards.

    Checks the correctness of categories and interfaces
    in the specification.
    Later, it validates the specification and dataflow
    files using pipeline manager to check if they are
    correct and compatible.

    Parameters
    ----------
    boards_directory : Path
        Path to the directory with boards to verify
    specification_file : Path
        Path to the JSON file with defined components
        to validate and compare with the boards
    interfaces_file : Path
        Path to the file with available interfaces
    pipeline_manager_build_directory : Path
        Path where the sources for Pipeline Manager will be
        stored and built

    Returns
    -------
    int :
        0 if categories and interfaces are valid
        Other value in case of an error.
    """
    status = check_interfaces(
        specification_file, interfaces_file
    )
    if status != 0:
        return status

    pipeline_manager_build_directory.mkdir(parents=True, exist_ok=True)

    build_prepare(pipeline_manager_build_directory)

    failed_boards = []
    for board_dir in boards_directory.glob('*'):
        board_name = board_dir.stem
        print(f'\n\nChecking {board_dir.stem}...\n\n', flush=True)
        board_file = board_dir / f"{board_name}.json"
        status = validate(
            specification_file,
            board_file,
            workspace_directory=pipeline_manager_build_directory
        )
        if status > 1:
            failed_boards.append(board_file)
    if failed_boards:
        print("Invalid graphs:", flush=True)
        for board in failed_boards:
            print(board)
    if failed_boards:
        return 1
    return 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--boards-directory",
        help="Path to the directory with boards",
        default=Path('./boards'),
        type=Path
    )
    parser.add_argument(
        "--specification-file",
        help="Path to the specification file",
        default=Path('./components-specification.json'),
        type=Path
    )
    parser.add_argument(
        "--interfaces-file",
        help="Path to the list of interfaces",
        default=Path("./interfaces.txt"),
        type=Path
    )
    parser.add_argument(
        "--pipeline-manager-build-directory",
        help="Path where Pipeline Manager files will be generated for build",
        default=Path("./pm-build"),
        type=Path
    )

    args = parser.parse_args()

    args = {k: v for k, v in vars(args).items() if v is not None}

    result = validate_graphs(**args)
    sys.exit(result)
